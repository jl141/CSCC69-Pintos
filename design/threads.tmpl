            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Julian Liu | laz.liu@mail.utoronto.ca

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to `struct thread':

    int64_t wake_time; /* Time to wake the thread from a nap, in ticks. */

This represents the time (ticks since boot) after which the thread should be
woken from its nap (a nap is a sleep triggered by a call to `timer_sleep()').

Added in `thread.h':

    /* For an implementation of timer_sleep() that avoids busy waiting. */
    list_less_func nap_list_less_func;                /* For sorting napping threads. */
    void thread_nap (int64_t start, int64_t ticks);   /* Naps the current thread. */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

`timer_sleep(int64_t ticks)' is called with interrupts on. It grabs the current 
number of timer ticks since boot and calculates if TICKS ticks have elasped since
then. If not, it makes a call to `thread_nap()', which naps the current thread until
TICKS ticks have elasped.
The timer interrupt handler calls `thread_tick()' on every timer tick, which is
responsible for waking up any threads that have reached the end of their nap.

>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

On every timer tick, the timer interrupt handler calls `thread_tick()' which checks 
if it is time to wake up any napping threads. To minimize the amount of time this
process takes, an ordered list (`nap_list') was utilized to store the napping threads.
`nap_list' is ordered, non-decreasing, by the `struct thread' member `wake_time'. 
While the first thread in `nap_list` has reached their wake time, we pop it from
the list and wake it up. This saves unnecessary operations on threads that are still napping.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

The amount of time each thread wants to sleep for is accounted for in its corresponding `struct thread'.
All `timer_sleep()' does is make a call to `thread_nap()' if the requested nap period has not already
elapsed . 
Note that `thread_nap()' accesses a critical section, namely `nap_list'. To avoid race conditions, it
disables interrupts similarly to the other thread functions like `thread_unblock()' or `thread_yield()'.

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

89    void
90    timer_sleep (int64_t ticks) 
91    {
92      int64_t start = timer_ticks ();
93
94      ASSERT (intr_get_level () == INTR_ON);
95      if (timer_elapsed (start) < ticks) 
96        thread_nap (start, ticks);
97    }

We will show that a timer interrupt causing a thread switch would not be able to cause a race condition.

`timer_sleep()' does not access any critical sections. Recall that all `timer_sleep()' does is make a call
to `thread_nap()' if the requested nap period has not already elapsed, which is calculated by comparing the
number of elasped timer ticks to the TICKS. 
Therefore a timer interrupt causing a thread switch would not be able to cause a race condition.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

I considered a design where I added another thread state, e.g. THREAD_SLEEPING.
However I realized that a thread cannot be waiting for a synchronization construct and
be in timer_sleep() at the same time, so I can safely use state THREAD_BLOCKED to take
advantage of the existing function thread_unblock().

A reason why I chose to implement `nap_list` to queue napping threads is because
it would allow the currently running thread to wake napping threads rather than
giving the CPU to the napping thread for it to check the time for itself, which would solve
the busy waiting problem. In addition, with this design, I could take advantage of
`struct thread' member `elem', all the nice functions in `list.h', and thread_tick().
I feel like this was a simple but effective design and was happy to make it work.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to `struct thread':

    int donated_priorities[WIDTH];      /* Donated priorities. */
    int pending_priority;               /* Priority pending donation revocation. */
    struct lock *pending_lock;          /* Lock pending release. */

`donated_priorities' keeps track of the priority donations that have been made to the thread,
up to maximum of WIDTH donations. This solves cases of multiple donations.
`pending_priority' keeps track of the priority the thread should set itself to after the donations
made to it are resolved. This solves cases of priority lowering during an active priority donation.
`pending_lock' keeps track of the lock the thread is waiting on. This helps to solve cases of
nested priorities. 

Added/modified in `thread.h':

    /* For priority scheduling and priority donation. */
    list_less_func prio_list_less_func;                     /* For sorting threads with priorities. */
    int thread_get_priority (void);                         /* Gets the priority of the current running thread. */
    void thread_set_priority (int);                         /* Sets the priority of the current running thread. */
    void thread_bestow_donation (struct thread *t, int d);  /* Gives a priority donation to a thread. */
    void thread_revoke_donation (void);                     /* Resets the most recent donation made to the current running thread. */
    bool thread_has_donations (void);                       /* True if the current running thread has a priority donation. */
    bool is_next_thread_equal_priority (void);              /* True if the next thread in the run queue has equal priority. */

    /* Returns true if the given thread is a valid thread. */
    bool is_thread (struct thread *t);

>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

When release a lock, up-ing a semaphore, or signalling a condition variable, sorting is utilized
to ensure that the thread with the highest priority is the thread to be woken up. 
In particular, `list_less_func prio_list_less_func' is used to sort threads waiting on a lock
or semaphore, while a manual sort is used to sort threads waiting on a condition variable.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

Thread A with prio 31 acquires lock A. Thread B with prio 32 acquires lock A, which results
in a donaton from thread B to thread A.

Nested donation is handled by continuously donating priority to the holder of the lock that
the next nested thread is waiting on. `struct thread' member `struct lock *pending_lock' is
used for this purpose.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

Thread A with prio 31 acquires lock A. Thread B with prio 32 acquires lock A, which results
in a donaton from thread B to thread A. When thread A calls `lock_release()', it checks for
thread B in the lock's wait queue. If B exists, A will revoke its more recent donation before
up-ing the lock's semaphore to allow B to run immediately after release.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

Similar to the Alarm Clock, I tried to utilize as much existing code as possible for the
simplest solution. In addition, I refrained from creating new structs and instead added members
to `struct thread' to simplify dealing with threads. 

I imposed no limit on nesting but a limit on distinct priority donations since you could theoretically
have infinite nesting but finite distinct priority donations since priority is a finite range from 0 to 63.


               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
